name: Build all Typst documents

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  find-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find .typ files (excl. ./config.typ) and emit matrix
        id: prepare
        shell: bash
        run: |
          echo "üîç Searching for .typ files (excluding ./config.typ)..."
          mapfile -d '' -t files < <(find . -type f -name '*.typ' ! -path './config.typ' -print0)

          if [ ${#files[@]} -eq 0 ]; then
            echo "‚ùå No Typst files found. Exiting."
            exit 1
          fi

          printf '%s\n' "${files[@]}"
          # Produce a JSON array for the matrix
          printf '%s\n' "${files[@]}" | python3 -c 'import sys, json; print(json.dumps([l.rstrip("\n") for l in sys.stdin]))' > matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  build:
    needs: find-files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJson(needs.find-files.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sanitize artifact name
        id: sanitize
        shell: bash
        run: |
          # Remplace les caract√®res interdits dans les noms d‚Äôartefacts
          safe_name=$(echo "${{ matrix.file }}" | tr '/\\:<>\"|?*\r\n' '_' | sed 's/^\.*//')
          echo "safe_name=$safe_name" >> $GITHUB_OUTPUT
          echo "Artifact safe name: $safe_name"

      - name: Build Typst document (matrix)
        uses: lvignoli/typst-action@main
        with:
          source_file: ${{ matrix.file }}
          options: |
            --root
            .

      - name: Upload PDF artifact for this job
        uses: actions/upload-artifact@v4
        with:
          name: pdf-${{ steps.sanitize.outputs.safe_name }}
          path: '**/*.pdf'

  collect:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all per-file artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Gather PDFs into build/
        run: |
          mkdir -p build
          find artifacts -name '*.pdf' -exec cp {} build/ \;
          echo "Collected PDFs:"
          ls -la build

      - name: Upload all generated PDFs (single artifact)
        uses: actions/upload-artifact@v4
        with:
          name: PDFs
          path: build/**/*.pdf

      - name: Get current date
        id: date
        run: echo "DATE=$(date +%Y-%m-%d-%H:%M)" >> $GITHUB_ENV

      - name: Create Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ github.ref_name }} ‚Äî ${{ env.DATE }}"
          files: build/**/*.pdf

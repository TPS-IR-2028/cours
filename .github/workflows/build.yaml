name: Build all Typst documents

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Trouver tous les fichiers .typ
      - name: Find Typst files
        id: find
        shell: bash
        run: |
          echo "üîç Searching for .typ files..."
          mapfile -d '' -t files < <(find . -type f -name '*.typ' ! -path './config.typ' -print0)
          if [ ${#files[@]} -eq 0 ]; then
            echo "‚ùå No Typst files found. Exiting."
            exit 1
          fi
          # √âcrire les fichiers dans un fichier temporaire pour Typst
          printf '%s\n' "${files[@]}" > typst_files.txt
          echo "files=$(cat typst_files.txt | tr '\n' ' ')" >> $GITHUB_OUTPUT

      # 3. Compiler tous les fichiers en une seule invocation Typst
      - name: Typst
        uses: lvignoli/typst-action@main
        with:
          source_file: ${{ steps.find.outputs.files }}
          options: |
            --root
            .

      # 4. Renommer tous les PDFs avec timestamp
      - name: Move PDFs to release with timestamp
        shell: bash
        run: |
          mkdir -p release
          TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
          for typfile in $(cat typst_files.txt); do
            base=$(basename "$typfile" .typ)
            if [ -f "${typfile%.typ}.pdf" ]; then
              mv "${typfile%.typ}.pdf" "release/${base}_${TIMESTAMP}.pdf"
            fi
          done
          echo "All PDFs moved to release/ with timestamp."

      # 5. Upload bundle final des PDFs
      - name: Set artifact name
        id: artifact
        run: |
          TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
          ARTIFACT_NAME="PDFs_${TIMESTAMP}"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "Artifact will be named: $ARTIFACT_NAME.zip"

      - name: Upload PDFs artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: release/*.pdf

      # 6. Cr√©er Release (si push avec un tag)
      - name: Create Release (if pushing a tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: "Cours ‚Äî ${{ github.ref_name }}"
          files: release/*.pdf

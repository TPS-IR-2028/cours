name: Build Typst documents

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build Typst documents
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Installer Typst
      - name: Install Typst
        run: |
          curl -L https://github.com/typst/typst/releases/latest/download/typst-x86_64-unknown-linux-musl.tar.xz \
            -o typst.tar.xz
          tar -xJf typst.tar.xz
          sudo mv typst-x86_64-unknown-linux-musl/typst /usr/local/bin/
          typst --version

      # 3. Trouver tous les fichiers .typ
      - name: Find Typst files
        id: find
        shell: bash
        run: |
          echo "üîç Searching for .typ files..."
          mapfile -d '' -t files < <(find . -type f -name '*.typ' ! -path './config.typ' -print0)
          if [ ${#files[@]} -eq 0 ]; then
            echo "‚ùå No Typst files found. Exiting."
            exit 1
          fi
          printf '%s\n' "${files[@]}" > typst_files.txt
          echo "Found ${#files[@]} files:"
          cat typst_files.txt

      # 4. Compiler tous les fichiers en PDFs avec timestamp
      - name: Compile Typst files
        shell: bash
        run: |
          mkdir -p release
          TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
          while read -r typfile; do
            base=$(basename "$typfile" .typ)
            outfile="release/${base}_${TIMESTAMP}.pdf"
            echo "üîß Compiling $typfile ‚Üí $outfile"
            typst compile "$typfile" "$outfile"  --root .
          done < typst_files.txt

      # 5. Upload bundle final des PDFs
      - name: Set artifact name
        id: artifact
        run: |
          TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
          ARTIFACT_NAME="PDFs_${TIMESTAMP}"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "Artifact will be named: $ARTIFACT_NAME.zip"

      - name: Upload PDFs artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: release/*.pdf

      # 6. Cr√©er Release (si push avec un tag)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: "Cours ‚Äî ${{ github.ref_name }}"
          files: release/*.pdf

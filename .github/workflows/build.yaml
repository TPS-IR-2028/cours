name: Build all Typst documents

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # 1. Trouver tous les fichiers .typ
  find-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: prepare
        shell: bash
        run: |
          echo "üîç Searching for .typ files..."
          mapfile -d '' -t files < <(find . -type f -name '*.typ' ! -path './config.typ' -print0)
          if [ ${#files[@]} -eq 0 ]; then
            echo "‚ùå No Typst files found. Exiting."
            exit 1
          fi
          printf '%s\n' "${files[@]}"
          # cr√©er la matrice
          printf '%s\n' "${files[@]}" | python3 -c 'import sys,json; print(json.dumps([l.rstrip() for l in sys.stdin]))' > matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  build:
    needs: find-files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJson(needs.find-files.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Typst
        uses: lvignoli/typst-action@main
        with:
          source_file: ${{ matrix.file }}
          options: |
            --root
            .

      - name: Move PDF to release with timestamp
        run: |
          mkdir -p release
          TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
          base=$(basename "${{ matrix.file }}" .typ)
          mv "${{ matrix.file }}.pdf" "release/${base}_${TIMESTAMP}.pdf"
          echo "PDF_NAME=${base}_${TIMESTAMP}.pdf" >> $GITHUB_ENV

      - name: Upload individual PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PDF_NAME }}
          path: release/${{ env.PDF_NAME }}

  collect:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all individual PDFs
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Set artifact name with timestamp
        id: artifact_name
        run: |
          TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
          ARTIFACT_NAME="PDFs_${TIMESTAMP}"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "Artifact will be named: $ARTIFACT_NAME.zip"

      - name: Upload final PDFs bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: release/*.pdf

      - name: Create Release (if pushing a tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: "Cours ‚Äî ${{ github.ref_name }}"
          files: release/*.pdf
